#!/usr/bin/env tsx

import { createHealthAssistant, uploadFiles } from '@/lib/ai/assistants';
import * as dotenv from 'dotenv';
import * as fs from 'fs';
import * as path from 'path';

// Carregar vari√°veis de ambiente
dotenv.config({ path: '.env.local' });

const UNIFIED_HEALTH_ASSISTANT_CONFIG = {
  name: "Assistente M√©dico",
  instructions: `Voc√™ √© um assistente m√©dico que combina triagem m√©dica inteligente com base de conhecimento especializada.

SUAS FUN√á√ïES PRINCIPAIS:

1. **TRIAGEM M√âDICA INTELIGENTE** - Detecte automaticamente quando o usu√°rio precisa de triagem m√©dica
2. **AN√ÅLISE DE SINTOMAS** - Use a "Tabela do N√≠vel de Higidez" (base-1.pdf) para avaliar sintomas
3. **INTERPRETA√á√ÉO DE EXAMES** - Use "Valores Ideais de Exames Laboratoriais" (base-2.pdf) para interpretar resultados
4. **INFORMA√á√ïES SOBRE SUPLEMENTOS** - Use "Guia Magistral Singularis" (base-3.pdf) para informa√ß√µes sobre suplementos

COMO FUNCIONAR:

**DETEC√á√ÉO AUTOM√ÅTICA DE TIPO DE PERGUNTA:**

1. **PERGUNTAS DE TRIAGEM** (use fluxo de triagem):
   - "Estou com dor de cabe√ßa"
   - "Tenho febre"
   - "Preciso de ajuda m√©dica"
   - "Estou sentindo mal"
   - Qualquer queixa m√©dica inicial

2. **PERGUNTAS ESPECIALIZADAS** (use base de conhecimento):
   - "O que pode causar cansa√ßo excessivo?"
   - "Meu TSH est√° em 4.5, isso √© normal?"
   - "Para que serve o Omega 3?"
   - "Quais s√£o os benef√≠cios da Ashwagandha?"
   - Perguntas sobre exames, sintomas espec√≠ficos, suplementos

**FLUXO DE TRIAGEM M√âDICA:**

Quando detectar pergunta de triagem, siga este fluxo:

ETAPA 1 - DADOS PESSOAIS:
- Apresente-se como assistente m√©dico
- Colete: nome, idade, sexo, peso, altura, profiss√£o, localiza√ß√£o, contato
- Seja cordial e profissional

ETAPA 2 - DETALHES DA QUEIXA:
- Colete: sintoma principal, dura√ß√£o, intensidade (0-10)
- Pe√ßa UMA informa√ß√£o por vez
- Seja atencioso e detalhado

ETAPA 3 - TRIAGEM E A√á√ÉO:
- Analise se √© seguro para automedica√ß√£o
- **SE SEGURO:** Forne√ßa orienta√ß√µes de autocuidado
- **SE N√ÉO SEGURO:** Informe que consulta m√©dica √© necess√°ria

**BASE DE CONHECIMENTO ESPECIALIZADA:**

Use os documentos quando for pergunta especializada:

- "base-1.pdf (Tabela do N√≠vel de Higidez)": Para an√°lise de sintomas e identifica√ß√£o de √°reas de aten√ß√£o
- "base-2.pdf (Valores Ideais de Exames Laboratoriais)": Para interpreta√ß√£o de resultados de exames
- "base-3.pdf (Guia Magistral Singularis)": Para informa√ß√µes sobre suplementos e formula√ß√µes

**DIRETRIZES IMPORTANTES:**

- SEMPRE enfatize que voc√™ N√ÉO √© um profissional de sa√∫de
- NUNCA forne√ßa diagn√≥sticos m√©dicos definitivos
- SEMPRE recomende consulta a um m√©dico para diagn√≥stico e tratamento
- Use os documentos fornecidos como base de conhecimento
- Cite as fontes quando poss√≠vel
- Seja claro, informativo e respons√°vel

**EXEMPLOS DE RESPOSTAS:**

TRIAGEM:
- "Ol√°! Sou seu assistente m√©dico. Vou ajud√°-lo com uma avalia√ß√£o inicial. Primeiro, qual √© o seu nome?"

ESPECIALIZADA:
- "Com base na tabela de higidez, seus sintomas sugerem aten√ß√£o em [√°rea]. Recomendo consultar um m√©dico para avalia√ß√£o completa."
- "Seu valor de [exame] est√° [acima/abaixo] do ideal. Isso pode indicar [possibilidade], mas apenas um m√©dico pode confirmar."
- "O suplemento [nome] tem indica√ß√µes para [condi√ß√£o], mas consulte seu m√©dico antes de usar."

**DETEC√á√ÉO INTELIGENTE:**

Analise a pergunta do usu√°rio e determine automaticamente:
- Se √© uma queixa m√©dica inicial ‚Üí Use fluxo de triagem
- Se √© uma pergunta sobre sintomas espec√≠ficos, exames ou suplementos ‚Üí Use base de conhecimento
- Se √© uma continua√ß√£o de triagem ‚Üí Continue o fluxo de triagem

Lembre-se: Sua fun√ß√£o √© INFORMAR, ORIENTAR e fazer TRIAGEM, n√£o diagnosticar ou prescrever.`,
  model: "gpt-4o",
};

async function setupHealthAssistant() {
  try {
    console.log('üöÄ Iniciando configura√ß√£o do Assistente M√©dico...\n');

    // Verificar se a chave da API est√° configurada
    if (!process.env.OPENAI_API_KEY) {
      console.log('‚ùå OPENAI_API_KEY n√£o encontrada no arquivo .env.local');
      console.log('üí° Adicione sua chave da OpenAI no arquivo .env.local:');
      console.log('   OPENAI_API_KEY=sua_chave_aqui');
      return;
    }

    console.log('‚úÖ Chave da API da OpenAI configurada');

    // Verificar se os arquivos PDF existem na pasta public/documents
    const pdfFiles = [
      './public/documents/base-1.pdf',
      './public/documents/base-2.pdf',
      './public/documents/base-3.pdf'
    ];

    const existingFiles = pdfFiles.filter(file => fs.existsSync(file));
    
    if (existingFiles.length === 0) {
      console.log('‚ùå Nenhum arquivo PDF encontrado na pasta public/documents.');
      console.log('üìÅ Arquivos esperados:');
      pdfFiles.forEach(file => console.log(`   - ${file}`));
      console.log('\nüí° Coloque os arquivos PDF na pasta public/documents e execute novamente.');
      return;
    }

    console.log(`üìÑ Arquivos encontrados: ${existingFiles.length}/${pdfFiles.length}`);
    existingFiles.forEach(file => {
      const fileName = path.basename(file);
      const fileSize = fs.statSync(file).size;
      const fileSizeMB = (fileSize / (1024 * 1024)).toFixed(2);
      console.log(`   ‚úÖ ${fileName} (${fileSizeMB} MB)`);
    });

    if (existingFiles.length < pdfFiles.length) {
      console.log('\n‚ö†Ô∏è  Alguns arquivos n√£o foram encontrados. O assistente ser√° criado com os arquivos dispon√≠veis.');
    }

    // Upload dos arquivos
    console.log('\nüì§ Fazendo upload dos arquivos para a OpenAI...');
    const fileIds = await uploadFiles(existingFiles);
    console.log(`‚úÖ ${fileIds.length} arquivos enviados com sucesso!`);

    // Criar o assistente
    console.log('\nü§ñ Criando o Assistente M√©dico...');
    const assistant = await createHealthAssistant({
      ...UNIFIED_HEALTH_ASSISTANT_CONFIG,
      fileIds,
    });

    console.log('\nüéâ Assistente M√©dico configurado com sucesso!');
    console.log(`üìã ID do Assistente: ${assistant.id}`);
    console.log(`üìù Nome: ${assistant.name}`);
    console.log(`üß† Modelo: ${assistant.model}`);
    console.log(`üìÅ Arquivos associados: ${assistant.fileIds.length}`);

    // Salvar o ID do assistente em um arquivo para uso posterior
    const configData = {
      assistantId: assistant.id,
      name: assistant.name,
      model: assistant.model,
      fileIds: assistant.fileIds,
      createdAt: new Date().toISOString(),
      files: existingFiles.map(file => ({
        path: file,
        name: path.basename(file),
        size: fs.statSync(file).size
      }))
    };

    fs.writeFileSync(
      './health-assistant-config.json',
      JSON.stringify(configData, null, 2)
    );

    console.log('\nüíæ Configura√ß√£o salva em: ./health-assistant-config.json');
    console.log('\nüîß Para usar o assistente, adicione o ID nas vari√°veis de ambiente:');
    console.log(`   HEALTH_ASSISTANT_ID=${assistant.id}`);

    // Mostrar informa√ß√µes sobre os arquivos
    console.log('\nüìö Documentos carregados:');
    existingFiles.forEach((file, index) => {
      const fileName = path.basename(file);
      const descriptions = [
        'Tabela do N√≠vel de Higidez',
        'Valores Ideais de Exames Laboratoriais', 
        'Guia Magistral Singularis'
      ];
      console.log(`   ${index + 1}. ${fileName} - ${descriptions[index] || 'Documento'}`);
    });

    console.log('\nüéØ FUNCIONALIDADES DO ASSISTENTE:');
    console.log('   ‚úÖ Triagem m√©dica inteligente');
    console.log('   ‚úÖ An√°lise de sintomas especializada');
    console.log('   ‚úÖ Interpreta√ß√£o de exames laboratoriais');
    console.log('   ‚úÖ Informa√ß√µes sobre suplementos');
    console.log('   ‚úÖ Detec√ß√£o autom√°tica de tipo de pergunta');
    console.log('   ‚úÖ Base de conhecimento m√©dica especializada');

  } catch (error) {
    console.error('‚ùå Erro ao configurar o assistente:', error);
    process.exit(1);
  }
}

// Executar o script
if (require.main === module) {
  setupHealthAssistant();
} 